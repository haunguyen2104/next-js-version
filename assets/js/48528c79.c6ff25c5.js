"use strict";(self.webpackChunknext_version=self.webpackChunknext_version||[]).push([[8213],{6695:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var s=n(5893),i=n(1151);const r={description:"Learn how to transition an existing Gatsby project to Next.js."},a="Migrating from Gatsby",o={id:"next-js/v13.0.0/migrating/from-gatsby",title:"Migrating from Gatsby",description:"Learn how to transition an existing Gatsby project to Next.js.",source:"@site/docs/next-js/v13.0.0/migrating/from-gatsby.md",sourceDirName:"next-js/v13.0.0/migrating",slug:"/next-js/v13.0.0/migrating/from-gatsby",permalink:"/next-js/v13.0.0/migrating/from-gatsby",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/next-js/v13.0.0/migrating/from-gatsby.md",tags:[],version:"current",frontMatter:{description:"Learn how to transition an existing Gatsby project to Next.js."},sidebar:"tutorialSidebar",previous:{title:"Migrating from Create React App",permalink:"/next-js/v13.0.0/migrating/from-create-react-app"},next:{title:"Migrating from React Router",permalink:"/next-js/v13.0.0/migrating/from-react-router"}},c={},d=[{value:"Updating <code>package.json</code> and dependencies",id:"updating-packagejson-and-dependencies",level:2},{value:"Static Assets and Compiled Output",id:"static-assets-and-compiled-output",level:2},{value:"Creating Routes",id:"creating-routes",level:2},{value:"Styling",id:"styling",level:2},{value:"Links",id:"links",level:2},{value:"Data Fetching",id:"data-fetching",level:2},{value:"Image Component and Image Optimization",id:"image-component-and-image-optimization",level:2},{value:"Migrating from Gatsby Image",id:"migrating-from-gatsby-image",level:3},{value:"Site Configuration",id:"site-configuration",level:2},{value:"Search Engine Optimization",id:"search-engine-optimization",level:2},{value:"Learn more",id:"learn-more",level:2}];function l(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"migrating-from-gatsby",children:"Migrating from Gatsby"}),"\n",(0,s.jsx)(t.p,{children:"This guide will help you understand how to transition from an existing Gatsby project to Next.js. Migrating to Next.js will allow you to:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Choose which ",(0,s.jsx)(t.a,{href:"/docs/basic-features/data-fetching/overview.md",children:"data fetching"})," strategy you want on a per-page basis."]}),"\n",(0,s.jsxs)(t.li,{children:["Use ",(0,s.jsx)(t.a,{href:"/docs/basic-features/data-fetching/incremental-static-regeneration.md",children:"Incremental Static Regeneration"})," to update ",(0,s.jsx)(t.em,{children:"existing"})," pages by re-rendering them in the background as traffic comes in."]}),"\n",(0,s.jsxs)(t.li,{children:["Use ",(0,s.jsx)(t.a,{href:"/docs/api-routes/introduction.md",children:"API Routes"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"And more! Let\u2019s walk through a series of steps to complete the migration."}),"\n",(0,s.jsxs)(t.h2,{id:"updating-packagejson-and-dependencies",children:["Updating ",(0,s.jsx)(t.code,{children:"package.json"})," and dependencies"]}),"\n",(0,s.jsxs)(t.p,{children:["The first step towards migrating to Next.js is to update ",(0,s.jsx)(t.code,{children:"package.json"})," and dependencies. You should:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Remove all Gatsby-related packages (but keep ",(0,s.jsx)(t.code,{children:"react"})," and ",(0,s.jsx)(t.code,{children:"react-dom"}),")."]}),"\n",(0,s.jsxs)(t.li,{children:["Install ",(0,s.jsx)(t.code,{children:"next"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Add Next.js related commands to ",(0,s.jsx)(t.code,{children:"scripts"}),". One is ",(0,s.jsx)(t.code,{children:"next dev"}),", which runs a development server at ",(0,s.jsx)(t.code,{children:"localhost:3000"}),". You should also add ",(0,s.jsx)(t.code,{children:"next build"})," and ",(0,s.jsx)(t.code,{children:"next start"})," for creating and starting a production build."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Here's an example ",(0,s.jsx)(t.code,{children:"package.json"})," (",(0,s.jsx)(t.a,{href:"https://github.com/leerob/gatsby-to-nextjs/pull/1/files#diff-b9cfc7f2cdf78a7f4b91a753d10865a2",children:"view diff"}),"):"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "scripts": {\n    "dev": "next dev",\n    "build": "next build",\n    "start": "next start"\n  },\n  "dependencies": {\n    "next": "latest",\n    "react": "latest",\n    "react-dom": "latest"\n  }\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"static-assets-and-compiled-output",children:"Static Assets and Compiled Output"}),"\n",(0,s.jsxs)(t.p,{children:["Gatsby uses the ",(0,s.jsx)(t.code,{children:"public"})," directory for the compiled output, whereas Next.js uses it for static assets. Here are the steps for migration (",(0,s.jsx)(t.a,{href:"https://github.com/leerob/gatsby-to-nextjs/pull/1/files#diff-a084b794bc0759e7a6b77810e01874f2",children:"view diff"}),"):"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Remove ",(0,s.jsx)(t.code,{children:".cache/"})," and ",(0,s.jsx)(t.code,{children:"public"})," from ",(0,s.jsx)(t.code,{children:".gitignore"})," and delete both directories."]}),"\n",(0,s.jsxs)(t.li,{children:["Rename Gatsby\u2019s ",(0,s.jsx)(t.code,{children:"static"})," directory as ",(0,s.jsx)(t.code,{children:"public"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["Add ",(0,s.jsx)(t.code,{children:".next"})," to ",(0,s.jsx)(t.code,{children:".gitignore"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"creating-routes",children:"Creating Routes"}),"\n",(0,s.jsxs)(t.p,{children:["Both Gatsby and Next support a ",(0,s.jsx)(t.code,{children:"pages"})," directory, which uses ",(0,s.jsx)(t.a,{href:"/docs/routing/introduction.md",children:"file-system based routing"}),". Gatsby's directory is ",(0,s.jsx)(t.code,{children:"src/pages"}),", which is also ",(0,s.jsx)(t.a,{href:"/docs/advanced-features/src-directory.md",children:"supported by Next.js"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Gatsby creates dynamic routes using the ",(0,s.jsx)(t.code,{children:"createPages"})," API inside of ",(0,s.jsx)(t.code,{children:"gatsby-node.js"}),". With Next, we can use ",(0,s.jsx)(t.a,{href:"/docs/routing/dynamic-routes.md",children:"Dynamic Routes"})," inside of ",(0,s.jsx)(t.code,{children:"pages"})," to achieve the same effect. Rather than having a ",(0,s.jsx)(t.code,{children:"template"})," directory, you can use the React component inside your dynamic route file. For example:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Gatsby:"})," ",(0,s.jsx)(t.code,{children:"createPages"})," API inside ",(0,s.jsx)(t.code,{children:"gatsby-node.js"})," for each blog post, then have a template file at ",(0,s.jsx)(t.code,{children:"src/templates/blog-post.js"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Next:"})," Create ",(0,s.jsx)(t.code,{children:"pages/blog/[slug].js"})," which contains the blog post template. The value of ",(0,s.jsx)(t.code,{children:"slug"})," is accessible through a ",(0,s.jsx)(t.a,{href:"/docs/routing/dynamic-routes.md",children:"query parameter"}),". For example, the route ",(0,s.jsx)(t.code,{children:"/blog/first-post"})," would forward the query object ",(0,s.jsx)(t.code,{children:"{ 'slug': 'first-post' }"})," to ",(0,s.jsx)(t.code,{children:"pages/blog/[slug].js"})," (",(0,s.jsx)(t.a,{href:"/docs/basic-features/data-fetching/get-static-paths.md",children:"learn more here"}),")."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"styling",children:"Styling"}),"\n",(0,s.jsxs)(t.p,{children:["With Gatsby, global CSS imports are included in ",(0,s.jsx)(t.code,{children:"gatsby-browser.js"}),". With Next, you should create a ",(0,s.jsxs)(t.a,{href:"/docs/advanced-features/custom-app.md",children:["custom ",(0,s.jsx)(t.code,{children:"_app.js"})]})," for global CSS. When migrating, you can copy over your CSS imports directly and update the relative file path, if necessary. Next.js has ",(0,s.jsx)(t.a,{href:"/docs/basic-features/built-in-css-support.md",children:"built-in CSS support"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"links",children:"Links"}),"\n",(0,s.jsxs)(t.p,{children:["The Gatsby ",(0,s.jsx)(t.code,{children:"Link"})," and Next.js ",(0,s.jsx)(t.a,{href:"/docs/api-reference/next/link.md",children:(0,s.jsx)(t.code,{children:"Link"})})," component have a slightly different API."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"// Gatsby\n\nimport { Link } from 'gatsby'\n\nexport default function Home() {\n  return <Link to=\"/blog\">blog</Link>\n}\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"// Next.js\n\nimport Link from 'next/link'\n\nexport default function Home() {\n  return <Link href=\"/blog\">blog</Link>\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Update any import statements, switch ",(0,s.jsx)(t.code,{children:"to"})," to ",(0,s.jsx)(t.code,{children:"href"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"data-fetching",children:"Data Fetching"}),"\n",(0,s.jsx)(t.p,{children:"The largest difference between Gatsby and Next.js is how data fetching is implemented. Gatsby is opinionated with GraphQL being the default strategy for retrieving data across your application. With Next.js, you get to choose which strategy you want (GraphQL is one supported option)."}),"\n",(0,s.jsxs)(t.p,{children:["Gatsby uses the ",(0,s.jsx)(t.code,{children:"graphql"})," tag to query data in the pages of your site. This may include local data, remote data, or information about your site configuration. Gatsby only allows the creation of static pages. With Next.js, you can choose on a ",(0,s.jsx)(t.a,{href:"/docs/basic-features/pages.md",children:"per-page basis"})," which ",(0,s.jsx)(t.a,{href:"/docs/basic-features/data-fetching/overview.md",children:"data fetching strategy"})," you want. For example, ",(0,s.jsx)(t.code,{children:"getServerSideProps"})," allows you to do server-side rendering. If you wanted to generate a static page, you'd export ",(0,s.jsx)(t.code,{children:"getStaticProps"})," / ",(0,s.jsx)(t.code,{children:"getStaticPaths"})," inside the page, rather than using ",(0,s.jsx)(t.code,{children:"pageQuery"}),". For example:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"// src/pages/[slug].js\n\n// Install remark and remark-html\nimport { remark } from 'remark'\nimport html from 'remark-html'\nimport { getPostBySlug, getAllPosts } from '../lib/blog'\n\nexport async function getStaticProps({ params }) {\n  const post = getPostBySlug(params.slug)\n  const markdown = await remark()\n    .use(html)\n    .process(post.content || '')\n  const content = markdown.toString()\n\n  return {\n    props: {\n      ...post,\n      content,\n    },\n  }\n}\n\nexport async function getStaticPaths() {\n  const posts = getAllPosts()\n\n  return {\n    paths: posts.map((post) => {\n      return {\n        params: {\n          slug: post.slug,\n        },\n      }\n    }),\n    fallback: false,\n  }\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You'll commonly see Gatsby plugins used for reading the file system (",(0,s.jsx)(t.code,{children:"gatsby-source-filesystem"}),"), handling markdown files (",(0,s.jsx)(t.code,{children:"gatsby-transformer-remark"}),"), and so on. For example, the popular starter blog example has ",(0,s.jsx)(t.a,{href:"https://github.com/gatsbyjs/gatsby-starter-blog/blob/master/package.json",children:"15 Gatsby specific packages"}),". Next takes a different approach. It includes common features directly inside the framework, and gives the user full control over integrations with external packages. For example, rather than abstracting reading from the file system to a plugin, you can use the native Node.js ",(0,s.jsx)(t.code,{children:"fs"})," package inside ",(0,s.jsx)(t.code,{children:"getStaticProps"})," / ",(0,s.jsx)(t.code,{children:"getStaticPaths"})," to read from the file system."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"// src/lib/blog.js\n\n// Install gray-matter and date-fns\nimport matter from 'gray-matter'\nimport { parseISO, format } from 'date-fns'\nimport fs from 'fs'\nimport { join } from 'path'\n\n// Add markdown files in `src/content/blog`\nconst postsDirectory = join(process.cwd(), 'src', 'content', 'blog')\n\nexport function getPostBySlug(slug) {\n  const realSlug = slug.replace(/\\.md$/, '')\n  const fullPath = join(postsDirectory, `${realSlug}.md`)\n  const fileContents = fs.readFileSync(fullPath, 'utf8')\n  const { data, content } = matter(fileContents)\n  const date = format(parseISO(data.date), 'MMMM dd, yyyy')\n\n  return { slug: realSlug, frontmatter: { ...data, date }, content }\n}\n\nexport function getAllPosts() {\n  const slugs = fs.readdirSync(postsDirectory)\n  const posts = slugs.map((slug) => getPostBySlug(slug))\n\n  return posts\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"image-component-and-image-optimization",children:"Image Component and Image Optimization"}),"\n",(0,s.jsxs)(t.p,{children:["Next.js has a built-in ",(0,s.jsx)(t.a,{href:"/docs/basic-features/image-optimization.md",children:"Image Component and Automatic Image Optimization"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The Next.js Image Component, ",(0,s.jsx)(t.a,{href:"/docs/api-reference/next/image.md",children:(0,s.jsx)(t.code,{children:"next/image"})}),", is an extension of the HTML ",(0,s.jsx)(t.code,{children:"<img>"})," element, evolved for the modern web."]}),"\n",(0,s.jsxs)(t.p,{children:["The Automatic Image Optimization allows for resizing, optimizing, and serving images in modern formats like ",(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types",children:"WebP"})," when the browser supports it. This avoids shipping large images to devices with a smaller viewport. It also allows Next.js to automatically adopt future image formats and serve them to browsers that support those formats."]}),"\n",(0,s.jsx)(t.h3,{id:"migrating-from-gatsby-image",children:"Migrating from Gatsby Image"}),"\n",(0,s.jsx)(t.p,{children:"Instead of optimizing images at build time, Next.js optimizes images on-demand, as users request them. Unlike static site generators and static-only solutions, your build times aren't increased, whether shipping 10 images or 10 million images."}),"\n",(0,s.jsx)(t.p,{children:"This means you can remove common Gatsby plugins like:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"gatsby-image"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"gatsby-transformer-sharp"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"gatsby-plugin-sharp"})}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Instead, use the built-in ",(0,s.jsx)(t.a,{href:"/docs/api-reference/next/image.md",children:(0,s.jsx)(t.code,{children:"next/image"})})," component and ",(0,s.jsx)(t.a,{href:"/docs/basic-features/image-optimization.md",children:"Automatic Image Optimization"}),"."]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"next/image"})," component's default loader is not supported when using ",(0,s.jsx)(t.a,{href:"/docs/advanced-features/static-html-export.md",children:(0,s.jsx)(t.code,{children:"next export"})}),". However, other loader options will work."]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:'import Image from \'next/image\'\nimport profilePic from \'../public/me.png\'\n\nexport default function Home() {\n  return (\n    <>\n      <h1>My Homepage</h1>\n      <Image\n        src={profilePic}\n        alt="Picture of the author"\n        // When "responsive", similar to "fluid" from Gatsby\n        // When "intrinsic", similar to "fluid" with maxWidth from Gatsby\n        // When "fixed", similar to "fixed" from Gatsby\n        layout="responsive"\n        // Optional, similar to "blur-up" from Gatsby\n        placeholder="blur"\n        // Optional, similar to "width" in Gatsby GraphQL\n        width={500}\n        // Optional, similar to "height" in Gatsby GraphQL\n        height={500}\n      />\n      <p>Welcome to my homepage!</p>\n    </>\n  )\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"site-configuration",children:"Site Configuration"}),"\n",(0,s.jsxs)(t.p,{children:["With Gatsby, your site's metadata (name, description, etc.) is located inside ",(0,s.jsx)(t.code,{children:"gatsby-config.js"}),". This is then exposed through the GraphQL API and consumed through a ",(0,s.jsx)(t.code,{children:"pageQuery"})," or a static query inside a component."]}),"\n",(0,s.jsx)(t.p,{children:"With Next.js, we recommend creating a config file similar to below. You can then import this file anywhere without having to use GraphQL to access your site's metadata."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"// src/config.js\n\nexport default {\n  title: 'Starter Blog',\n  author: {\n    name: 'Lee Robinson',\n    summary: 'who loves Next.js.',\n  },\n  description: 'A starter blog converting Gatsby -> Next.',\n  social: {\n    twitter: 'leeerob',\n  },\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"search-engine-optimization",children:"Search Engine Optimization"}),"\n",(0,s.jsxs)(t.p,{children:["Most Gatsby examples use ",(0,s.jsx)(t.code,{children:"react-helmet"})," to assist with adding ",(0,s.jsx)(t.code,{children:"meta"})," tags for proper SEO. With Next.js, we use ",(0,s.jsx)(t.a,{href:"/docs/api-reference/next/head.md",children:(0,s.jsx)(t.code,{children:"next/head"})})," to add ",(0,s.jsx)(t.code,{children:"meta"})," tags to your ",(0,s.jsx)(t.code,{children:"<head />"})," element. For example, here's an SEO component with Gatsby:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"// src/components/seo.js\n\nimport { Helmet } from 'react-helmet'\n\nexport default function SEO({ description, title, siteTitle }) {\n  return (\n    <Helmet\n      title={title}\n      titleTemplate={siteTitle ? `%s | ${siteTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: description,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: description,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: twitter,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: description,\n        },\n      ]}\n    />\n  )\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"And here's the same example using Next.js, including reading from a site config file."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'// src/components/seo.js\n\nimport Head from \'next/head\'\nimport config from \'../config\'\n\nexport default function SEO({ description, title }) {\n  const siteTitle = config.title\n\n  return (\n    <Head>\n      <title>{`${title} | ${siteTitle}`}</title>\n      <meta name="description" content={description} />\n      <meta property="og:type" content="website" />\n      <meta property="og:title" content={title} />\n      <meta property="og:description" content={description} />\n      <meta property="og:site_name" content={siteTitle} />\n      <meta property="twitter:card" content="summary" />\n      <meta property="twitter:creator" content={config.social.twitter} />\n      <meta property="twitter:title" content={title} />\n      <meta property="twitter:description" content={description} />\n    </Head>\n  )\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"learn-more",children:"Learn more"}),"\n",(0,s.jsxs)(t.p,{children:["Take a look at ",(0,s.jsx)(t.a,{href:"https://github.com/leerob/gatsby-to-nextjs/pull/1",children:"this pull request"})," for more details on how an app can be migrated from Gatsby to Next.js. If you have questions or if this guide didn't work for you, feel free to reach out to our community on ",(0,s.jsx)(t.a,{href:"https://github.com/vercel/next.js/discussions",children:"GitHub Discussions"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var s=n(7294);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);