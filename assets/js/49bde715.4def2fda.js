"use strict";(self.webpackChunknext_version=self.webpackChunknext_version||[]).push([[2912],{3537:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=n(5893),t=n(1151);const a={description:"Handle errors in your Next.js app."},s="Error Handling",i={id:"next-js/v13.0.1/advanced-features/error-handling",title:"Error Handling",description:"Handle errors in your Next.js app.",source:"@site/docs/next-js/v13.0.1/advanced-features/error-handling.md",sourceDirName:"next-js/v13.0.1/advanced-features",slug:"/next-js/v13.0.1/advanced-features/error-handling",permalink:"/next-js/v13.0.1/advanced-features/error-handling",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/next-js/v13.0.1/advanced-features/error-handling.md",tags:[],version:"current",frontMatter:{description:"Handle errors in your Next.js app."},sidebar:"tutorialSidebar",previous:{title:"Dynamic Import",permalink:"/next-js/v13.0.1/advanced-features/dynamic-import"},next:{title:"Internationalized Routing",permalink:"/next-js/v13.0.1/advanced-features/i18n-routing"}},d={},c=[{value:"Handling Errors in Development",id:"handling-errors-in-development",level:2},{value:"Handling Server Errors",id:"handling-server-errors",level:2},{value:"Handling Client Errors",id:"handling-client-errors",level:2},{value:"Reporting Errors",id:"reporting-errors",level:3}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h1,{id:"error-handling",children:"Error Handling"}),"\n",(0,o.jsx)(r.p,{children:"This documentation explains how you can handle development, server-side, and client-side errors."}),"\n",(0,o.jsx)(r.h2,{id:"handling-errors-in-development",children:"Handling Errors in Development"}),"\n",(0,o.jsxs)(r.p,{children:["When there is a runtime error during the development phase of your Next.js application, you will encounter an ",(0,o.jsx)(r.strong,{children:"overlay"}),". It is a modal that covers the webpage. It is only visible when the development server runs using ",(0,o.jsx)(r.code,{children:"next dev"}),", ",(0,o.jsx)(r.code,{children:"npm run dev"}),", or ",(0,o.jsx)(r.code,{children:"yarn dev"})," and not in production. Fixing the error will automatically dismiss the overlay."]}),"\n",(0,o.jsx)(r.p,{children:"Here is an example of an overlay:"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.img,{src:"https://assets.vercel.com/image/upload/v1645118290/docs-assets/static/docs/error-handling/overlay.png",alt:"Example of an overlay when in development mode"})}),"\n",(0,o.jsx)(r.h2,{id:"handling-server-errors",children:"Handling Server Errors"}),"\n",(0,o.jsxs)(r.p,{children:["Next.js provides a static 500 page by default to handle server-side errors that occur in your application. You can also ",(0,o.jsx)(r.a,{href:"/docs/advanced-features/custom-error-page#customizing-the-500-page",children:"customize this page"})," by creating a ",(0,o.jsx)(r.code,{children:"pages/500.js"})," file."]}),"\n",(0,o.jsx)(r.p,{children:"Having a 500 page in your application does not show specific errors to the app user."}),"\n",(0,o.jsxs)(r.p,{children:["You can also use ",(0,o.jsx)(r.a,{href:"/docs/advanced-features/custom-error-page#404-page",children:"404 page"})," to handle specific runtime error like ",(0,o.jsx)(r.code,{children:"file not found"}),"."]}),"\n",(0,o.jsx)(r.h2,{id:"handling-client-errors",children:"Handling Client Errors"}),"\n",(0,o.jsxs)(r.p,{children:["React ",(0,o.jsx)(r.a,{href:"https://reactjs.org/docs/error-boundaries.html",children:"Error Boundaries"})," is a graceful way to handle a JavaScript error on the client so that the other parts of the application continue working. In addition to preventing the page from crashing, it allows you to provide a custom fallback component and even log error information."]}),"\n",(0,o.jsxs)(r.p,{children:["To use Error Boundaries for your Next.js application, you must create a class component ",(0,o.jsx)(r.code,{children:"ErrorBoundary"})," and wrap the ",(0,o.jsx)(r.code,{children:"Component"})," prop in the ",(0,o.jsx)(r.code,{children:"pages/_app.js"})," file. This component will be responsible to:"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Render a fallback UI after an error is thrown"}),"\n",(0,o.jsx)(r.li,{children:"Provide a way to reset the Application's state"}),"\n",(0,o.jsx)(r.li,{children:"Log error information"}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:["You can create an ",(0,o.jsx)(r.code,{children:"ErrorBoundary"})," class component by extending ",(0,o.jsx)(r.code,{children:"React.Component"}),". For example:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-jsx",children:'class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n\n    // Define a state variable to track whether is an error or not\n    this.state = { hasError: false }\n  }\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI\n\n    return { hasError: true }\n  }\n  componentDidCatch(error, errorInfo) {\n    // You can use your own error logging service here\n    console.log({ error, errorInfo })\n  }\n  render() {\n    // Check if the error is thrown\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return (\n        <div>\n          <h2>Oops, there is an error!</h2>\n          <button\n            type="button"\n            onClick={() => this.setState({ hasError: false })}\n          >\n            Try again?\n          </button>\n        </div>\n      )\n    }\n\n    // Return children components in case of no error\n\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary\n'})}),"\n",(0,o.jsxs)(r.p,{children:["The ",(0,o.jsx)(r.code,{children:"ErrorBoundary"})," component keeps track of an ",(0,o.jsx)(r.code,{children:"hasError"})," state. The value of this state variable is a boolean. When the value of ",(0,o.jsx)(r.code,{children:"hasError"})," is ",(0,o.jsx)(r.code,{children:"true"}),", then the ",(0,o.jsx)(r.code,{children:"ErrorBoundary"})," component will render a fallback UI. Otherwise, it will render the children components."]}),"\n",(0,o.jsxs)(r.p,{children:["After creating an ",(0,o.jsx)(r.code,{children:"ErrorBoundary"})," component, import it in the ",(0,o.jsx)(r.code,{children:"pages/_app.js"})," file to wrap the ",(0,o.jsx)(r.code,{children:"Component"})," prop in your Next.js application."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-jsx",children:"// Import the ErrorBoundary component\nimport ErrorBoundary from '../components/ErrorBoundary'\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    // Wrap the Component prop with ErrorBoundary component\n    <ErrorBoundary>\n      <Component {...pageProps} />\n    </ErrorBoundary>\n  )\n}\n\nexport default MyApp\n"})}),"\n",(0,o.jsxs)(r.p,{children:["You can learn more about ",(0,o.jsx)(r.a,{href:"https://reactjs.org/docs/error-boundaries.html",children:"Error Boundaries"})," in React's documentation."]}),"\n",(0,o.jsx)(r.h3,{id:"reporting-errors",children:"Reporting Errors"}),"\n",(0,o.jsxs)(r.p,{children:["To monitor client errors, use a service like ",(0,o.jsx)(r.a,{href:"https://github.com/vercel/next.js/tree/canary/examples/with-sentry",children:"Sentry"}),", Bugsnag or Datadog."]})]})}function h(e={}){const{wrapper:r}={...(0,t.a)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>i,a:()=>s});var o=n(7294);const t={},a=o.createContext(t);function s(e){const r=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(a.Provider,{value:r},e.children)}}}]);