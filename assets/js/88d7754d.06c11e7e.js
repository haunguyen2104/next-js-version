"use strict";(self.webpackChunknext_version=self.webpackChunknext_version||[]).push([[4402],{3439:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var t=s(5893),r=s(1151);const i={description:"Add rewrites to your Next.js app."},a="Rewrites",c={id:"next-js/v13.0.1/api-reference/next.config.js/rewrites",title:"Rewrites",description:"Add rewrites to your Next.js app.",source:"@site/docs/next-js/v13.0.1/api-reference/next.config.js/rewrites.md",sourceDirName:"next-js/v13.0.1/api-reference/next.config.js",slug:"/next-js/v13.0.1/api-reference/next.config.js/rewrites",permalink:"/next-js/v13.0.1/api-reference/next.config.js/rewrites",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/next-js/v13.0.1/api-reference/next.config.js/rewrites.md",tags:[],version:"current",frontMatter:{description:"Add rewrites to your Next.js app."},sidebar:"tutorialSidebar",previous:{title:"Redirects",permalink:"/next-js/v13.0.1/api-reference/next.config.js/redirects"},next:{title:"Runtime Configuration",permalink:"/next-js/v13.0.1/api-reference/next.config.js/runtime-configuration"}},o={},l=[{value:"Rewrite parameters",id:"rewrite-parameters",level:2},{value:"Path Matching",id:"path-matching",level:2},{value:"Wildcard Path Matching",id:"wildcard-path-matching",level:3},{value:"Regex Path Matching",id:"regex-path-matching",level:3},{value:"Header, Cookie, and Query Matching",id:"header-cookie-and-query-matching",level:2},{value:"Rewriting to an external URL",id:"rewriting-to-an-external-url",level:2},{value:"Incremental adoption of Next.js",id:"incremental-adoption-of-nextjs",level:3},{value:"Rewrites with basePath support",id:"rewrites-with-basepath-support",level:3},{value:"Rewrites with i18n support",id:"rewrites-with-i18n-support",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"rewrites",children:"Rewrites"}),"\n",(0,t.jsxs)(s,{open:!0,children:[(0,t.jsx)("summary",{children:(0,t.jsx)("b",{children:"Examples"})}),(0,t.jsx)("ul",{children:(0,t.jsx)("li",{children:(0,t.jsx)("a",{href:"https://github.com/vercel/next.js/tree/canary/examples/rewrites",children:"Rewrites"})})})]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("b",{children:"Version History"})}),(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Version"}),(0,t.jsx)(n.th,{children:"Changes"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"v10.2.0"})}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"has"})," added."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"v9.5.0"})}),(0,t.jsx)(n.td,{children:"Rewrites added."})]})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Rewrites allow you to map an incoming request path to a different destination path."}),"\n",(0,t.jsxs)(n.p,{children:["Rewrites act as a URL proxy and mask the destination path, making it appear the user hasn't changed their location on the site. In contrast, ",(0,t.jsx)(n.a,{href:"/docs/api-reference/next.config.js/redirects.md",children:"redirects"})," will reroute to a new page and show the URL changes."]}),"\n",(0,t.jsxs)(n.p,{children:["To use rewrites you can use the ",(0,t.jsx)(n.code,{children:"rewrites"})," key in ",(0,t.jsx)(n.code,{children:"next.config.js"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/about',\n        destination: '/',\n      },\n    ]\n  },\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Rewrites are applied to client-side routing, a ",(0,t.jsx)(n.code,{children:'<Link href="/about">'})," will have the rewrite applied in the above example."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"rewrites"})," is an async function that expects to return either an array or an object of arrays (see below) holding objects with ",(0,t.jsx)(n.code,{children:"source"})," and ",(0,t.jsx)(n.code,{children:"destination"})," properties:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"source"}),": ",(0,t.jsx)(n.code,{children:"String"})," - is the incoming request path pattern."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"destination"}),": ",(0,t.jsx)(n.code,{children:"String"})," is the path you want to route to."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"basePath"}),": ",(0,t.jsx)(n.code,{children:"false"})," or ",(0,t.jsx)(n.code,{children:"undefined"})," - if false the basePath won't be included when matching, can be used for external rewrites only."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"locale"}),": ",(0,t.jsx)(n.code,{children:"false"})," or ",(0,t.jsx)(n.code,{children:"undefined"})," - whether the locale should not be included when matching."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"has"})," is an array of ",(0,t.jsx)(n.a,{href:"#header-cookie-and-query-matching",children:"has objects"})," with the ",(0,t.jsx)(n.code,{children:"type"}),", ",(0,t.jsx)(n.code,{children:"key"})," and ",(0,t.jsx)(n.code,{children:"value"})," properties."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["When the ",(0,t.jsx)(n.code,{children:"rewrites"})," function returns an array, rewrites are applied after checking the filesystem (pages and ",(0,t.jsx)(n.code,{children:"/public"})," files) and before dynamic routes. When the ",(0,t.jsx)(n.code,{children:"rewrites"})," function returns an object of arrays with a specific shape, this behavior can be changed and more finely controlled, as of ",(0,t.jsx)(n.code,{children:"v10.1"})," of Next.js:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  async rewrites() {\n    return {\n      beforeFiles: [\n        // These rewrites are checked after headers/redirects\n        // and before all files including _next/public files which\n        // allows overriding page files\n        {\n          source: '/some-page',\n          destination: '/somewhere-else',\n          has: [{ type: 'query', key: 'overrideMe' }],\n        },\n      ],\n      afterFiles: [\n        // These rewrites are checked after pages/public files\n        // are checked but before dynamic routes\n        {\n          source: '/non-existent',\n          destination: '/somewhere-else',\n        },\n      ],\n      fallback: [\n        // These rewrites are checked after both pages/public files\n        // and dynamic routes are checked\n        {\n          source: '/:path*',\n          destination: `https://my-old-site.com/:path*`,\n        },\n      ],\n    }\n  },\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Note: rewrites in ",(0,t.jsx)(n.code,{children:"beforeFiles"})," do not check the filesystem/dynamic routes immediately after matching a source, they continue until all ",(0,t.jsx)(n.code,{children:"beforeFiles"})," have been checked."]}),"\n",(0,t.jsx)(n.p,{children:"The order Next.js routes are checked is:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/api-reference/next.config.js/headers",children:"headers"})," are checked/applied"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/api-reference/next.config.js/redirects",children:"redirects"})," are checked/applied"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"beforeFiles"})," rewrites are checked/applied"]}),"\n",(0,t.jsxs)(n.li,{children:["static files from the ",(0,t.jsx)(n.a,{href:"/docs/basic-features/static-file-serving",children:"public directory"}),", ",(0,t.jsx)(n.code,{children:"_next/static"})," files, and non-dynamic pages are checked/served"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"afterFiles"})," rewrites are checked/applied, if one of these rewrites is matched we check dynamic routes/static files after each match"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fallback"})," rewrites are checked/applied, these are applied before rendering the 404 page and after dynamic routes/all static assets have been checked. If you use ",(0,t.jsx)(n.a,{href:"/docs/api-reference/data-fetching/get-static-paths#fallback-true",children:"fallback: true/'blocking'"})," in ",(0,t.jsx)(n.code,{children:"getStaticPaths"}),", the fallback ",(0,t.jsx)(n.code,{children:"rewrites"})," defined in your ",(0,t.jsx)(n.code,{children:"next.config.js"})," will ",(0,t.jsx)(n.em,{children:"not"})," be run."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"rewrite-parameters",children:"Rewrite parameters"}),"\n",(0,t.jsxs)(n.p,{children:["When using parameters in a rewrite the parameters will be passed in the query by default when none of the parameters are used in the ",(0,t.jsx)(n.code,{children:"destination"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/old-about/:path*',\n        destination: '/about', // The :path parameter isn't used here so will be automatically passed in the query\n      },\n    ]\n  },\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"If a parameter is used in the destination none of the parameters will be automatically passed in the query."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/docs/:path*',\n        destination: '/:path*', // The :path parameter is used here so will not be automatically passed in the query\n      },\n    ]\n  },\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can still pass the parameters manually in the query if one is already used in the destination by specifying the query in the ",(0,t.jsx)(n.code,{children:"destination"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/:first/:second',\n        destination: '/:first?second=:second',\n        // Since the :first parameter is used in the destination the :second parameter\n        // will not automatically be added in the query although we can manually add it\n        // as shown above\n      },\n    ]\n  },\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Note: for static pages from the ",(0,t.jsx)(n.a,{href:"/docs/advanced-features/automatic-static-optimization.md",children:"Automatic Static Optimization"})," or ",(0,t.jsx)(n.a,{href:"/docs/basic-features/data-fetching/get-static-props.md",children:"prerendering"})," params from rewrites will be parsed on the client after hydration and provided in the query."]}),"\n",(0,t.jsx)(n.h2,{id:"path-matching",children:"Path Matching"}),"\n",(0,t.jsxs)(n.p,{children:["Path matches are allowed, for example ",(0,t.jsx)(n.code,{children:"/blog/:slug"})," will match ",(0,t.jsx)(n.code,{children:"/blog/hello-world"})," (no nested paths):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog/:slug',\n        destination: '/news/:slug', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"wildcard-path-matching",children:"Wildcard Path Matching"}),"\n",(0,t.jsxs)(n.p,{children:["To match a wildcard path you can use ",(0,t.jsx)(n.code,{children:"*"})," after a parameter, for example ",(0,t.jsx)(n.code,{children:"/blog/:slug*"})," will match ",(0,t.jsx)(n.code,{children:"/blog/a/b/c/d/hello-world"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog/:slug*',\n        destination: '/news/:slug*', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"regex-path-matching",children:"Regex Path Matching"}),"\n",(0,t.jsxs)(n.p,{children:["To match a regex path you can wrap the regex in parenthesis after a parameter, for example ",(0,t.jsx)(n.code,{children:"/blog/:slug(\\\\d{1,})"})," will match ",(0,t.jsx)(n.code,{children:"/blog/123"})," but not ",(0,t.jsx)(n.code,{children:"/blog/abc"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/old-blog/:post(\\\\d{1,})',\n        destination: '/blog/:post', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The following characters ",(0,t.jsx)(n.code,{children:"("}),", ",(0,t.jsx)(n.code,{children:")"}),", ",(0,t.jsx)(n.code,{children:"{"}),", ",(0,t.jsx)(n.code,{children:"}"}),", ",(0,t.jsx)(n.code,{children:":"}),", ",(0,t.jsx)(n.code,{children:"*"}),", ",(0,t.jsx)(n.code,{children:"+"}),", ",(0,t.jsx)(n.code,{children:"?"})," are used for regex path matching, so when used in the ",(0,t.jsx)(n.code,{children:"source"})," as non-special values they must be escaped by adding ",(0,t.jsx)(n.code,{children:"\\\\"})," before them:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  async rewrites() {\n    return [\n      {\n        // this will match `/english(default)/something` being requested\n        source: '/english\\\\(default\\\\)/:slug',\n        destination: '/en-us/:slug',\n      },\n    ]\n  },\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"header-cookie-and-query-matching",children:"Header, Cookie, and Query Matching"}),"\n",(0,t.jsxs)(n.p,{children:["To only match a rewrite when header, cookie, or query values also match the ",(0,t.jsx)(n.code,{children:"has"})," field can be used. Both the ",(0,t.jsx)(n.code,{children:"source"})," and all ",(0,t.jsx)(n.code,{children:"has"})," items must match for the rewrite to be applied."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"has"})," items have the following fields:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"type"}),": ",(0,t.jsx)(n.code,{children:"String"})," - must be either ",(0,t.jsx)(n.code,{children:"header"}),", ",(0,t.jsx)(n.code,{children:"cookie"}),", ",(0,t.jsx)(n.code,{children:"host"}),", or ",(0,t.jsx)(n.code,{children:"query"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"key"}),": ",(0,t.jsx)(n.code,{children:"String"})," - the key from the selected type to match against."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"value"}),": ",(0,t.jsx)(n.code,{children:"String"})," or ",(0,t.jsx)(n.code,{children:"undefined"})," - the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value ",(0,t.jsx)(n.code,{children:"first-(?<paramName>.*)"})," is used for ",(0,t.jsx)(n.code,{children:"first-second"})," then ",(0,t.jsx)(n.code,{children:"second"})," will be usable in the destination with ",(0,t.jsx)(n.code,{children:":paramName"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  async rewrites() {\n    return [\n      // if the header `x-rewrite-me` is present,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-rewrite-me',\n          },\n        ],\n        destination: '/another-page',\n      },\n      // if the source, query, and cookie are matched,\n      // this rewrite will be applied\n      {\n        source: '/specific/:path*',\n        has: [\n          {\n            type: 'query',\n            key: 'page',\n            // the page value will not be available in the\n            // destination since value is provided and doesn't\n            // use a named capture group e.g. (?<page>home)\n            value: 'home',\n          },\n          {\n            type: 'cookie',\n            key: 'authorized',\n            value: 'true',\n          },\n        ],\n        destination: '/:path*/home',\n      },\n      // if the header `x-authorized` is present and\n      // contains a matching value, this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-authorized',\n            value: '(?<authorized>yes|true)',\n          },\n        ],\n        destination: '/home?authorized=:authorized',\n      },\n      // if the host is `example.com`,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'host',\n            value: 'example.com',\n          },\n        ],\n        destination: '/another-page',\n      },\n    ]\n  },\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"rewriting-to-an-external-url",children:"Rewriting to an external URL"}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:(0,t.jsx)("b",{children:"Examples"})}),(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:(0,t.jsx)("a",{href:"https://github.com/vercel/next.js/tree/canary/examples/custom-routes-proxying",children:"Incremental adoption of Next.js"})}),(0,t.jsx)("li",{children:(0,t.jsx)("a",{href:"https://github.com/vercel/next.js/tree/canary/examples/with-zones",children:"Using Multiple Zones"})})]})]}),"\n",(0,t.jsxs)(n.p,{children:["Rewrites allow you to rewrite to an external url. This is especially useful for incrementally adopting Next.js. The following is an example rewrite for redirecting the ",(0,t.jsx)(n.code,{children:"/blog"})," route of your main app to an external site."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog',\n        destination: 'https://example.com/blog',\n      },\n      {\n        source: '/blog/:slug',\n        destination: 'https://example.com/blog/:slug', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you're using ",(0,t.jsx)(n.code,{children:"trailingSlash: true"}),", you also need to insert a trailing slash in the ",(0,t.jsx)(n.code,{children:"source"})," parameter. If the destination server is also expecting a trailing slash it should be included in the ",(0,t.jsx)(n.code,{children:"destination"})," parameter as well."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  trailingSlash: true,\n  async rewrites() {\n    return [\n      {\n        source: '/blog/',\n        destination: 'https://example.com/blog/',\n      },\n      {\n        source: '/blog/:path*/',\n        destination: 'https://example.com/blog/:path*/',\n      },\n    ]\n  },\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"incremental-adoption-of-nextjs",children:"Incremental adoption of Next.js"}),"\n",(0,t.jsx)(n.p,{children:"You can also have Next.js fall back to proxying to an existing website after checking all Next.js routes."}),"\n",(0,t.jsx)(n.p,{children:"This way you don't have to change the rewrites configuration when migrating more pages to Next.js"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  async rewrites() {\n    return {\n      fallback: [\n        {\n          source: '/:path*',\n          destination: `https://custom-routes-proxying-endpoint.vercel.app/:path*`,\n        },\n      ],\n    }\n  },\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["See additional information on incremental adoption ",(0,t.jsx)(n.a,{href:"/docs/migrating/incremental-adoption.md",children:"in the docs here"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"rewrites-with-basepath-support",children:"Rewrites with basePath support"}),"\n",(0,t.jsxs)(n.p,{children:["When leveraging ",(0,t.jsxs)(n.a,{href:"/docs/api-reference/next.config.js/basepath.md",children:[(0,t.jsx)(n.code,{children:"basePath"})," support"]})," with rewrites each ",(0,t.jsx)(n.code,{children:"source"})," and ",(0,t.jsx)(n.code,{children:"destination"})," is automatically prefixed with the ",(0,t.jsx)(n.code,{children:"basePath"})," unless you add ",(0,t.jsx)(n.code,{children:"basePath: false"})," to the rewrite:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  basePath: '/docs',\n\n  async rewrites() {\n    return [\n      {\n        source: '/with-basePath', // automatically becomes /docs/with-basePath\n        destination: '/another', // automatically becomes /docs/another\n      },\n      {\n        // does not add /docs to /without-basePath since basePath: false is set\n        // Note: this can not be used for internal rewrites e.g. `destination: '/another'`\n        source: '/without-basePath',\n        destination: 'https://example.com',\n        basePath: false,\n      },\n    ]\n  },\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"rewrites-with-i18n-support",children:"Rewrites with i18n support"}),"\n",(0,t.jsxs)(n.p,{children:["When leveraging ",(0,t.jsxs)(n.a,{href:"/docs/advanced-features/i18n-routing.md",children:[(0,t.jsx)(n.code,{children:"i18n"})," support"]})," with rewrites each ",(0,t.jsx)(n.code,{children:"source"})," and ",(0,t.jsx)(n.code,{children:"destination"})," is automatically prefixed to handle the configured ",(0,t.jsx)(n.code,{children:"locales"})," unless you add ",(0,t.jsx)(n.code,{children:"locale: false"})," to the rewrite. If ",(0,t.jsx)(n.code,{children:"locale: false"})," is used you must prefix the ",(0,t.jsx)(n.code,{children:"source"})," and ",(0,t.jsx)(n.code,{children:"destination"})," with a locale for it to be matched correctly."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n\n  async rewrites() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        destination: '/another', // automatically passes the locale on\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        destination: '/nl/another',\n        locale: false,\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        destination: '/en/another',\n        locale: false,\n      },\n      {\n        // it's possible to match all locales even when locale: false is set\n        source: '/:locale/api-alias/:path*',\n        destination: '/api/:path*',\n        locale: false,\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        destination: '/another',\n      },\n    ]\n  },\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>a});var t=s(7294);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);