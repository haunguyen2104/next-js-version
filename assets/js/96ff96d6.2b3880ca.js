"use strict";(self.webpackChunknext_version=self.webpackChunknext_version||[]).push([[9898],{5617:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var s=n(5893),a=n(1151);const r={description:"Learn how to create or update static pages at runtime with Incremental Static Regeneration."},i="Incremental Static Regeneration",o={id:"next-js/v13.0.0/basic-features/data-fetching/incremental-static-regeneration",title:"Incremental Static Regeneration",description:"Learn how to create or update static pages at runtime with Incremental Static Regeneration.",source:"@site/docs/next-js/v13.0.0/basic-features/data-fetching/incremental-static-regeneration.md",sourceDirName:"next-js/v13.0.0/basic-features/data-fetching",slug:"/next-js/v13.0.0/basic-features/data-fetching/incremental-static-regeneration",permalink:"/next-js/v13.0.0/basic-features/data-fetching/incremental-static-regeneration",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/next-js/v13.0.0/basic-features/data-fetching/incremental-static-regeneration.md",tags:[],version:"current",frontMatter:{description:"Learn how to create or update static pages at runtime with Incremental Static Regeneration."},sidebar:"tutorialSidebar",previous:{title:"getStaticProps",permalink:"/next-js/v13.0.0/basic-features/data-fetching/get-static-props"},next:{title:"Data Fetching Overview",permalink:"/next-js/v13.0.0/basic-features/data-fetching/overview"}},d={},c=[{value:"On-demand Revalidation",id:"on-demand-revalidation",level:2},{value:"Using On-Demand Revalidation",id:"using-on-demand-revalidation",level:3},{value:"Testing on-Demand ISR during development",id:"testing-on-demand-isr-during-development",level:3},{value:"Error handling and revalidation",id:"error-handling-and-revalidation",level:2},{value:"Self-hosting ISR",id:"self-hosting-isr",level:2},{value:"Related",id:"related",level:2}];function l(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"incremental-static-regeneration",children:"Incremental Static Regeneration"}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)("b",{children:"Examples"})}),(0,s.jsxs)("ul",{children:[(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://nextjs.org/commerce",children:"Next.js Commerce"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://reactions-demo.vercel.app/",children:"GitHub Reactions Demo"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{href:"https://static-tweet.vercel.app/",children:"Static Tweet Demo"})})]})]}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)("b",{children:"Version History"})}),(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Version"}),(0,s.jsx)(t.th,{children:"Changes"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"v12.2.0"})}),(0,s.jsx)(t.td,{children:"On-Demand ISR is stable"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"v12.1.0"})}),(0,s.jsx)(t.td,{children:"On-Demand ISR added (beta)."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"v12.0.0"})}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.a,{href:"https://nextjs.org/blog/next-12#bot-aware-isr-fallback",children:"Bot-aware ISR fallback"})," added."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"v9.5.0"})}),(0,s.jsx)(t.td,{children:"Base Path added."})]})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["Next.js allows you to create or update static pages ",(0,s.jsx)(t.em,{children:"after"})," you\u2019ve built your site. Incremental Static Regeneration (ISR) enables you to use static-generation on a per-page basis, ",(0,s.jsx)(t.strong,{children:"without needing to rebuild the entire site"}),". With ISR, you can retain the benefits of static while scaling to millions of pages."]}),"\n",(0,s.jsxs)(t.p,{children:["To use ISR, add the ",(0,s.jsx)(t.code,{children:"revalidate"})," prop to ",(0,s.jsx)(t.code,{children:"getStaticProps"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"function Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\n// This function gets called at build time on server-side.\n// It may be called again, on a serverless function, if\n// revalidation is enabled and a new request comes in\nexport async function getStaticProps() {\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  return {\n    props: {\n      posts,\n    },\n    // Next.js will attempt to re-generate the page:\n    // - When a request comes in\n    // - At most once every 10 seconds\n    revalidate: 10, // In seconds\n  }\n}\n\n// This function gets called at build time on server-side.\n// It may be called again, on a serverless function, if\n// the path has not been generated.\nexport async function getStaticPaths() {\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }))\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: blocking } will server-render pages\n  // on-demand if the path doesn't exist.\n  return { paths, fallback: 'blocking' }\n}\n\nexport default Blog\n"})}),"\n",(0,s.jsx)(t.p,{children:"When a request is made to a page that was pre-rendered at build time, it will initially show the cached page."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Any requests to the page after the initial request and before 10 seconds are also cached and instantaneous."}),"\n",(0,s.jsx)(t.li,{children:"After the 10-second window, the next request will still show the cached (stale) page"}),"\n",(0,s.jsx)(t.li,{children:"Next.js triggers a regeneration of the page in the background."}),"\n",(0,s.jsx)(t.li,{children:"Once the page generates successfully, Next.js will invalidate the cache and show the updated page. If the background regeneration fails, the old page would still be unaltered."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["When a request is made to a path that hasn\u2019t been generated, Next.js will server-render the page on the first request. Future requests will serve the static file from the cache. ISR on Vercel ",(0,s.jsx)(t.a,{href:"https://vercel.com/docs/concepts/next.js/incremental-static-regeneration?utm_source=next-site&utm_medium=docs&utm_campaign=next-website",children:"persists the cache globally and handles rollbacks"}),"."]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["Note: Check if your upstream data provider has caching enabled by default. You might need to disable (e.g. ",(0,s.jsx)(t.code,{children:"useCdn: false"}),"), otherwise a revalidation won't be able to pull fresh data to update the ISR cache. Caching can occur at a CDN (for an endpoint being requested) when it returns the ",(0,s.jsx)(t.code,{children:"Cache-Control"})," header."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"on-demand-revalidation",children:"On-demand Revalidation"}),"\n",(0,s.jsxs)(t.p,{children:["If you set a ",(0,s.jsx)(t.code,{children:"revalidate"})," time of ",(0,s.jsx)(t.code,{children:"60"}),", all visitors will see the same generated version of your site for one minute. The only way to invalidate the cache is from someone visiting that page after the minute has passed."]}),"\n",(0,s.jsxs)(t.p,{children:["Starting with ",(0,s.jsx)(t.code,{children:"v12.2.0"}),", Next.js supports On-Demand Incremental Static Regeneration to manually purge the Next.js cache for a specific page. This makes it easier to update your site when:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Content from your headless CMS is created or updated"}),"\n",(0,s.jsx)(t.li,{children:"Ecommerce metadata changes (price, description, category, reviews, etc.)"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Inside ",(0,s.jsx)(t.code,{children:"getStaticProps"}),", you do not need to specify ",(0,s.jsx)(t.code,{children:"revalidate"})," to use on-demand revalidation. If ",(0,s.jsx)(t.code,{children:"revalidate"})," is omitted, Next.js will use the default value of ",(0,s.jsx)(t.code,{children:"false"})," (no revalidation) and only revalidate the page on-demand when ",(0,s.jsx)(t.code,{children:"revalidate()"})," is called."]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Note:"})," ",(0,s.jsx)(t.a,{href:"/docs/advanced-features/middleware.md",children:"Middleware"})," won't be executed for On-Demand ISR requests. Instead, call ",(0,s.jsx)(t.code,{children:"revalidate()"})," on the ",(0,s.jsx)(t.em,{children:"exact"})," path that you want revalidated. For example, if you have ",(0,s.jsx)(t.code,{children:"pages/blog/[slug].js"})," and a rewrite from ",(0,s.jsx)(t.code,{children:"/post-1"})," -> ",(0,s.jsx)(t.code,{children:"/blog/post-1"}),", you would need to call ",(0,s.jsx)(t.code,{children:"res.revalidate('/blog/post-1')"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"using-on-demand-revalidation",children:"Using On-Demand Revalidation"}),"\n",(0,s.jsx)(t.p,{children:"First, create a secret token only known by your Next.js app. This secret will be used to prevent unauthorized access to the revalidation API Route. You can access the route (either manually or with a webhook) with the following URL structure:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"https://<your-site.com>/api/revalidate?secret=<token>\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Next, add the secret as an ",(0,s.jsx)(t.a,{href:"/docs/basic-features/environment-variables.md",children:"Environment Variable"})," to your application. Finally, create the revalidation API Route:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"// pages/api/revalidate.js\n\nexport default async function handler(req, res) {\n  // Check for secret to confirm this is a valid request\n  if (req.query.secret !== process.env.MY_SECRET_TOKEN) {\n    return res.status(401).json({ message: 'Invalid token' })\n  }\n\n  try {\n    // this should be the actual path not a rewritten path\n    // e.g. for \"/blog/[slug]\" this should be \"/blog/post-1\"\n    await res.revalidate('/path-to-revalidate')\n    return res.json({ revalidated: true })\n  } catch (err) {\n    // If there was an error, Next.js will continue\n    // to show the last successfully generated page\n    return res.status(500).send('Error revalidating')\n  }\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://on-demand-isr.vercel.app",children:"View our demo"})," to see on-demand revalidation in action and provide feedback."]}),"\n",(0,s.jsx)(t.h3,{id:"testing-on-demand-isr-during-development",children:"Testing on-Demand ISR during development"}),"\n",(0,s.jsxs)(t.p,{children:["When running locally with ",(0,s.jsx)(t.code,{children:"next dev"}),", ",(0,s.jsx)(t.code,{children:"getStaticProps"})," is invoked on every request. To verify your on-demand ISR configuration is correct, you will need to create a ",(0,s.jsx)(t.a,{href:"/docs/api-reference/cli.md#build",children:"production build"})," and start the ",(0,s.jsx)(t.a,{href:"/docs/api-reference/cli.md#production",children:"production server"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"$ next build\n$ next start\n"})}),"\n",(0,s.jsx)(t.p,{children:"Then, you can confirm that static pages have successfully revalidated."}),"\n",(0,s.jsx)(t.h2,{id:"error-handling-and-revalidation",children:"Error handling and revalidation"}),"\n",(0,s.jsxs)(t.p,{children:["If there is an error inside ",(0,s.jsx)(t.code,{children:"getStaticProps"})," when handling background regeneration, or you manually throw an error, the last successfully generated page will continue to show. On the next subsequent request, Next.js will retry calling ",(0,s.jsx)(t.code,{children:"getStaticProps"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"export async function getStaticProps() {\n  // If this request throws an uncaught error, Next.js will\n  // not invalidate the currently shown page and\n  // retry getStaticProps on the next request.\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  if (!res.ok) {\n    // If there is a server error, you might want to\n    // throw an error instead of returning so that the cache is not updated\n    // until the next successful request.\n    throw new Error(`Failed to fetch posts, received status ${res.status}`)\n  }\n\n  // If the request was successful, return the posts\n  // and revalidate every 10 seconds.\n  return {\n    props: {\n      posts,\n    },\n    revalidate: 10,\n  }\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"self-hosting-isr",children:"Self-hosting ISR"}),"\n",(0,s.jsxs)(t.p,{children:["Incremental Static Regeneration (ISR) works on ",(0,s.jsx)(t.a,{href:"/docs/deployment.md#self-hosting",children:"self-hosted Next.js sites"})," out of the box when you use ",(0,s.jsx)(t.code,{children:"next start"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["You can use this approach when deploying to container orchestrators such as ",(0,s.jsx)(t.a,{href:"https://kubernetes.io/",children:"Kubernetes"})," or ",(0,s.jsx)(t.a,{href:"https://www.nomadproject.io/",children:"HashiCorp Nomad"}),". By default, generated assets will be stored in-memory on each pod. This means that each pod will have its own copy of the static files. Stale data may be shown until that specific pod is hit by a request."]}),"\n",(0,s.jsx)(t.p,{children:"To ensure consistency across all pods, you can disable in-memory caching. This will inform the Next.js server to only leverage assets generated by ISR in the file system."}),"\n",(0,s.jsxs)(t.p,{children:["You can use a shared network mount in your Kubernetes pods (or similar setup) to reuse the same file-system cache between different containers. By sharing the same mount, the ",(0,s.jsx)(t.code,{children:".next"})," folder which contains the ",(0,s.jsx)(t.code,{children:"next/image"})," cache will also be shared and re-used."]}),"\n",(0,s.jsxs)(t.p,{children:["To disable in-memory caching, set ",(0,s.jsx)(t.code,{children:"isrMemoryCacheSize"})," to ",(0,s.jsx)(t.code,{children:"0"})," in your ",(0,s.jsx)(t.code,{children:"next.config.js"})," file:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"module.exports = {\n  experimental: {\n    // Defaults to 50MB\n    isrMemoryCacheSize: 0,\n  },\n}\n"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Note:"})," You might need to consider a race condition between multiple pods trying to update the cache at the same time, depending on how your shared mount is configured."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"related",children:"Related"}),"\n",(0,s.jsx)(t.p,{children:"For more information on what to do next, we recommend the following sections:"}),"\n",(0,s.jsx)("div",{class:"card",children:(0,s.jsxs)("a",{href:"/docs/basic-features/data-fetching/get-static-paths.md",children:[(0,s.jsx)("b",{children:"Dynamic routing"}),(0,s.jsx)("small",{children:"Learn more about dynamic routing in Next.js with getStaticPaths."})]})})]})}function h(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>i});var s=n(7294);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);